package vista;

import aplicacion.Empresa;
import aplicacion.FachadaAplicacion;
import aplicacion.Historial;
import aplicacion.OfertaVenta;
import aplicacion.Usuario;

import java.sql.Timestamp;

import java.util.Iterator;
import java.util.List;
import java.util.stream.Collectors;

import vista.componentes.ColoresGUI;

import vista.componentes.DialogoInfo;
import vista.componentes.FuentesGUI;
import vista.modeloTablas.ModeloTablaCompra;

import javax.swing.*;

public class CompraParticipacionesPanel extends javax.swing.JPanel {

    /**
     * Panel donde se venden participaciones por parte de empresas o inversores
     */
    private Usuario comprador;
    private FachadaAplicacion fa;
    private String[] nombresOtrosUsuarios;
    private Empresa vendedor = null;
    private float precioMaximo = -1.0f;

    public CompraParticipacionesPanel() {
        // No usar, requerido por NetBeans
        initComponents();
    }

    public CompraParticipacionesPanel(Usuario comprador, FachadaAplicacion fa) {
        this.comprador = comprador;
        this.fa = fa;
        List<String> lista = fa.obtenerListaEmpresas().stream().map(e -> e.getIdUsuario()).collect(Collectors.toList());
        nombresOtrosUsuarios = new String[lista.size()];
        nombresOtrosUsuarios = lista.toArray(nombresOtrosUsuarios);
        initComponents();
        botonComprar.setEnabled(false);
        actualizarOfertas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaOfertas = new vista.componentes.Tabla();
        titulo = new vista.componentes.Etiqueta();
        botonComprar = new vista.componentes.Boton();
        if (nombresOtrosUsuarios == null)
            seleccionEmpresa = new vista.componentes.SelecionBox();
        else
            seleccionEmpresa = new vista.componentes.SelecionBox<String>(nombresOtrosUsuarios);
        empresaLabel = new vista.componentes.Etiqueta();
        precioMaximoPartLabel = new vista.componentes.Etiqueta();
        numeroPartLabel = new vista.componentes.Etiqueta();
        cantidad = new vista.componentes.Deslizador(0, 0);
        numeroLabel = new vista.componentes.Etiqueta();
        precioMaximoTextBox = new vista.componentes.TextBox();
        monedaLabel = new vista.componentes.Etiqueta();

        setPreferredSize(new java.awt.Dimension(900, 600));

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        tablaOfertas.setModel(new ModeloTablaCompra());
        tablaOfertas.setColumnSelectionAllowed(true);
        tablaOfertas.setName("tablaOfertas"); // NOI18N
        jScrollPane1.setViewportView(tablaOfertas);
        tablaOfertas.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        titulo.setText("Compra de participaciones");
        titulo.setName("titulo"); // NOI18N

        botonComprar.setText("Comprar");
        botonComprar.setName("botonComprar"); // NOI18N
        botonComprar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comprarParticipaciones(evt);
            }
        });

        seleccionEmpresa.setName("seleccionEmpresa"); // NOI18N
        seleccionEmpresa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evtCambiarEntrada(evt);
            }
        });

        empresaLabel.setText("Empresa");
        empresaLabel.setName("empresaLabel"); // NOI18N

        precioMaximoPartLabel.setText("Precio máximo por participación");
        precioMaximoPartLabel.setName("precioMaximoPartLabel"); // NOI18N

        numeroPartLabel.setText("Cantidad");
        numeroPartLabel.setName("numeroPartLabel"); // NOI18N

        cantidad.setName("cantidad"); // NOI18N
        cantidad.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cantidadStateChanged(evt);
            }
        });

        numeroLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        numeroLabel.setText("0");
        numeroLabel.setName("numeroLabel"); // NOI18N

        precioMaximoTextBox.setName("precioMaximoTextBox"); // NOI18N
        precioMaximoTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                precioMaximoTextBoxActionPerformed(evt);
            }
        });

        monedaLabel.setText("$");
        monedaLabel.setName("monedaLabel"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(45, 45, 45)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(empresaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(numeroPartLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(precioMaximoPartLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(cantidad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(seleccionEmpresa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(numeroLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(precioMaximoTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(monedaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(botonComprar, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(122, 122, 122))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(empresaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(13, 13, 13)
                                                .addComponent(seleccionEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(precioMaximoPartLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(precioMaximoTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(monedaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addComponent(numeroPartLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(cantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(numeroLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(botonComprar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(88, Short.MAX_VALUE))
        );

        titulo.setFont(FuentesGUI.getFuente(FuentesGUI.Modificador.NORMAL,
                FuentesGUI.Size.GRANDE));
    }// </editor-fold>//GEN-END:initComponents

    private void comprarParticipaciones(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comprarParticipaciones
        if (cantidad.getValue() == 0) {
            fa.muestraExcepcion("Por favor, especifique cuántas participaciones desea comprar!",
                    DialogoInfo.NivelDeAdvertencia.ADVERTENCIA);
            return;
        }
        if (precioMaximo <= 0.0f) {
            fa.muestraExcepcion("Por favor, especifique el precio máximo a pagar por participación!",
                    DialogoInfo.NivelDeAdvertencia.ADVERTENCIA);
            return;
        }
        fa.comprarParticipaciones(comprador, vendedor, cantidad.getValue(), precioMaximo);
        actualizarOfertas();
        JFrame ventanaPadre = FachadaGui.getInstance().getVentanaActiva();
        if (ventanaPadre instanceof VEmpresa) {
            VEmpresa ve = (VEmpresa) ventanaPadre;
            ve.actualizarCampos();
        } else if (ventanaPadre instanceof VInversor) {
            VInversor vi = (VInversor) ventanaPadre;
            vi.actualizarCampos();
        }
        fa.insertarHistorial(new Historial(vendedor.getIdUsuario(), comprador.getIdUsuario(), new Timestamp(System.currentTimeMillis()), cantidad.getValue(), precioMaximo, "Compra"));
    }//GEN-LAST:event_comprarParticipaciones

    private void evtCambiarEntrada(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evtCambiarEntrada

        actualizarOfertas();
    }//GEN-LAST:event_evtCambiarEntrada

    private void cantidadStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_cantidadStateChanged
        this.numeroLabel.setText(Integer.toString(cantidad.getValue()));
    }//GEN-LAST:event_cantidadStateChanged

    private void precioMaximoTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_precioMaximoTextBoxActionPerformed
        // Validar entrada correcta
        float temp = -1.0f;
        try {
            temp = Float.parseFloat(precioMaximoTextBox.getText());
            if (temp >= 0.0f) {
                precioMaximo = temp;
                precioMaximoTextBox.setBackground(ColoresGUI.blanco);
            } else {
                precioMaximoTextBox.setBackground(ColoresGUI.getGUIColorExtraClaro(ColoresGUI.Colores.ROJO));
                precioMaximo = -1.0f;
            }
        } catch (NumberFormatException e) {
            precioMaximoTextBox.setBackground(ColoresGUI.getGUIColorExtraClaro(ColoresGUI.Colores.ROJO));
            precioMaximo = -1.0f;
        }
        actualizarOfertas();
    }//GEN-LAST:event_precioMaximoTextBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private vista.componentes.Boton botonComprar;
    private vista.componentes.Deslizador cantidad;
    private vista.componentes.Etiqueta empresaLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private vista.componentes.Etiqueta monedaLabel;
    private vista.componentes.Etiqueta numeroLabel;
    private vista.componentes.Etiqueta numeroPartLabel;
    private vista.componentes.Etiqueta precioMaximoPartLabel;
    private vista.componentes.TextBox precioMaximoTextBox;
    private vista.componentes.SelecionBox seleccionEmpresa;
    private vista.componentes.Tabla tablaOfertas;
    private vista.componentes.Etiqueta titulo;
    // End of variables declaration//GEN-END:variables

    private void actualizarOfertas() {
        ModeloTablaCompra m = (ModeloTablaCompra) tablaOfertas.getModel();
        if (seleccionEmpresa.getSelectedItem() == null) {
            return;
        }
        vendedor = fa.obtenerDatosEmpresa(new Usuario((String) seleccionEmpresa.getSelectedItem(), false, false));

        try {
            int precio;
            if (precioMaximo < 0.0f) {
                precio = Integer.MAX_VALUE; // Para poder encontrar nuevas ofertas aunque sea 0 
            } else {
                precio = (int) precioMaximo;
            }

            List<OfertaVenta> ofertasDisponibles = fa.getOfertasVenta(vendedor.getIdUsuario(), precio);
            m.setFilas(ofertasDisponibles);
            // actualizar valor máximo del deslizador
            int totalDisponibles = 0;
            double precioMaximoOfertas = 0.0f;
            Iterator<OfertaVenta> it = ofertasDisponibles.iterator();
            // Borrar las ofertas donde el comprador es el propio usuario
            while(it.hasNext()){
                OfertaVenta o = it.next();
                if(o.getVendedor().equals(comprador.getIdUsuario()))
                    it.remove();
            }

            for (OfertaVenta e : ofertasDisponibles) {
                totalDisponibles += e.getNumParticipaciones();
                if (e.getPrecio() > precioMaximoOfertas) {
                    precioMaximoOfertas = e.getPrecio();
                }
            }
            this.cantidad.setMaximum(totalDisponibles);
        } catch (Exception e) {
            System.out.println("NO SE PUDO ACTUALIZAR LA TABLA...");
            e.printStackTrace();
            this.cantidad.setMaximum(0);
        }
        if (m.getRowCount() > 0) {
            tablaOfertas.setRowSelectionInterval(0, 0);
            botonComprar.setEnabled(true);
        } else {
            botonComprar.setEnabled(false);
        }
    }
}
